-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE "shift_blocks" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "shift_blocks_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"assignments" jsonb,
	"start_time" time,
	"end_time" time,
	"date" date
);
--> statement-breakpoint
ALTER TABLE "shift_blocks" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "academic_calendar" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "academic_calendar_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"label" text,
	"date" timestamp with time zone,
	"date_string" text,
	"start_of_quarter" boolean DEFAULT false NOT NULL
);
--> statement-breakpoint
ALTER TABLE "academic_calendar" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "rooms" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "rooms_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"name" text,
	"spelling" text
);
--> statement-breakpoint
ALTER TABLE "rooms" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "events" (
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"event_type" text,
	"lecture_title" text,
	"room_name" text,
	"resources" jsonb DEFAULT '[]'::jsonb,
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "events_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"item_id2" bigint,
	"start_time" time,
	"end_time" time,
	"raw" jsonb,
	"item_id" bigint,
	"event_name" text,
	"updated_at" timestamp with time zone,
	"man_owner" uuid,
	"date" date,
	"instructor_names" jsonb,
	"organization" text,
	CONSTRAINT "instructor_name_is_array_or_null" CHECK ((instructor_names IS NULL) OR (jsonb_typeof(instructor_names) = 'array'::text))
);
--> statement-breakpoint
ALTER TABLE "events" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "faculty_updates" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "faculty_updates_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"faculty" bigint,
	"author" uuid DEFAULT gen_random_uuid(),
	"content" text,
	"updated_at" timestamp with time zone
);
--> statement-breakpoint
ALTER TABLE "faculty_updates" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "profiles" (
	"id" uuid PRIMARY KEY NOT NULL,
	"name" text,
	"auto_hide" boolean DEFAULT false NOT NULL,
	"current_filter" text,
	"bg" text,
	"roles" jsonb DEFAULT '[]'::jsonb NOT NULL,
	CONSTRAINT "check_roles_is_array" CHECK (jsonb_typeof(roles) = 'array'::text)
);
--> statement-breakpoint
ALTER TABLE "profiles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "faculty" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "faculty_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"kelloggdirectory_name" text,
	"twentyfivelive_name" text,
	"kelloggdirectory_title" text,
	"kelloggdirectory_bio" text,
	"kelloggdirectory_image_url" text,
	"updated_at" timestamp,
	"kelloggdirectory_bio_url" text,
	"kelloggdirectory_subtitle" text,
	"timing" smallint DEFAULT '1',
	"complexity" smallint DEFAULT '1',
	"temperment" integer DEFAULT 1,
	"uses_mic" boolean DEFAULT false,
	"left_source" text DEFAULT 'ROOM_PC',
	"right_source" text DEFAULT 'ROOM_PC',
	"setup_notes" text,
	"cutout_image" text,
	CONSTRAINT "faculty_kelloggdirectory_name_key" UNIQUE("kelloggdirectory_name")
);
--> statement-breakpoint
ALTER TABLE "faculty" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "organizations" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "clubs_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"name" text,
	"logo" text,
	"about" text,
	"url" text
);
--> statement-breakpoint
CREATE TABLE "shifts" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "shifts_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"profile_id" uuid,
	"start_time" time,
	"end_time" time,
	"date" date
);
--> statement-breakpoint
ALTER TABLE "shifts" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "room_filters" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "room_filters_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"name" text,
	"display" jsonb,
	"owner" uuid DEFAULT gen_random_uuid(),
	"default" boolean
);
--> statement-breakpoint
ALTER TABLE "room_filters" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "notifications" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"user_id" uuid,
	"title" text NOT NULL,
	"message" text NOT NULL,
	"type" text NOT NULL,
	"event_id" bigint,
	"read_at" timestamp with time zone,
	"created_at" timestamp with time zone DEFAULT now(),
	"data" jsonb
);
--> statement-breakpoint
ALTER TABLE "notifications" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "panopto_checks" (
	"id" bigserial PRIMARY KEY NOT NULL,
	"event_id" bigint NOT NULL,
	"check_time" time NOT NULL,
	"completed_time" time,
	"created_at" timestamp with time zone DEFAULT now(),
	"updated_at" timestamp with time zone DEFAULT now(),
	"completed_by_user_id" uuid,
	"status" text
);
--> statement-breakpoint
ALTER TABLE "events" ADD CONSTRAINT "events_man_owner_fkey" FOREIGN KEY ("man_owner") REFERENCES "public"."profiles"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "shifts" ADD CONSTRAINT "shifts_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "notifications" ADD CONSTRAINT "notifications_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."events"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "notifications" ADD CONSTRAINT "notifications_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "panopto_checks" ADD CONSTRAINT "panopto_checks_completed_by_user_id_fkey" FOREIGN KEY ("completed_by_user_id") REFERENCES "public"."profiles"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "panopto_checks" ADD CONSTRAINT "panopto_checks_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."events"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
CREATE INDEX "idx_events_date_start_time" ON "events" USING btree ("date" date_ops,"start_time" time_ops);--> statement-breakpoint
CREATE INDEX "idx_events_end_time" ON "events" USING btree ("end_time" time_ops);--> statement-breakpoint
CREATE INDEX "idx_events_event_name_start_time" ON "events" USING btree ("event_name" text_ops,"start_time" time_ops);--> statement-breakpoint
CREATE INDEX "idx_events_event_type" ON "events" USING btree ("event_type" text_ops);--> statement-breakpoint
CREATE INDEX "idx_events_id" ON "events" USING btree ("id" int8_ops);--> statement-breakpoint
CREATE INDEX "idx_events_item_id" ON "events" USING btree ("id" int8_ops);--> statement-breakpoint
CREATE INDEX "idx_events_item_id2" ON "events" USING btree ("item_id2" int8_ops);--> statement-breakpoint
CREATE INDEX "idx_events_room_name" ON "events" USING btree ("room_name" text_ops);--> statement-breakpoint
CREATE INDEX "idx_events_start_time" ON "events" USING btree ("start_time" time_ops);--> statement-breakpoint
CREATE INDEX "idx_profiles_name" ON "profiles" USING btree ("name" text_ops);--> statement-breakpoint
CREATE INDEX "idx_profiles_roles" ON "profiles" USING gin ("roles" jsonb_ops);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "shift_blocks" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "academic_calendar" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "rooms" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "events" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "faculty_updates" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "profiles" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "faculty" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "shifts" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "room_filters" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Allow all to authenticated" ON "notifications" AS PERMISSIVE FOR ALL TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "rt_select_all_notifications" ON "notifications" AS PERMISSIVE FOR SELECT TO "anon", "authenticated";--> statement-breakpoint
CREATE POLICY "notifications_select_own" ON "notifications" AS PERMISSIVE FOR SELECT TO "authenticated";
*/